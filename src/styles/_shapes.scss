// _shapes.scss
// SASS functions and mixins for generating basic shapes and gradients
// with customizable colors, sizes, and effects
// Designed for Kyozo-style modern web design

// Function to create a circle
@function circle($size, $color, $gradient: null) {
  @return (
    width: $size,
    height: $size,
    border-radius: 50%,
    background: if($gradient != null, $gradient, $color)
  );
}

// Function to create a square
@function square($size, $color, $gradient: null) {
  @return (
    width: $size,
    height: $size,
    background: if($gradient != null, $gradient, $color)
  );
}

// Function to create an oval
@function oval($width, $height, $color, $gradient: null) {
  @return (
    width: $width,
    height: $height,
    border-radius: 50%,
    background: if($gradient != null, $gradient, $color)
  );
}

// Function to create a line
@function line($width, $height, $color, $gradient: null) {
  @return (
    width: $width,
    height: $height,
    background: if($gradient != null, $gradient, $color)
  );
}

// Function to create a rectangle with rounded corners
@function rounded-rectangle($width, $height, $radius, $color, $gradient: null) {
  @return (
    width: $width,
    height: $height,
    border-radius: $radius,
    background: if($gradient != null, $gradient, $color)
  );
}

// Function to create a triangle
@function triangle($size, $color) {
  @return (
    width: 0,
    height: 0,
    border-left: $size solid transparent,
    border-right: $size solid transparent,
    border-bottom: $size * 1.5 solid $color
  );
}

// Gradient generator functions
@function linear-gradient($direction, $color-stops...) {
  @return linear-gradient($direction, $color-stops);
}

@function radial-gradient($shape, $size, $position, $color-stops...) {
  @return radial-gradient($shape $size at $position, $color-stops);
}

// Mixins for applying shapes directly

// Circle mixin
@mixin circle($size, $color, $gradient: null) {
  width: $size;
  height: $size;
  border-radius: 50%;
  @if $gradient != null {
    background: $gradient;
  } @else {
    background: $color;
  }
}

// Square mixin
@mixin square($size, $color, $gradient: null) {
  width: $size;
  height: $size;
  @if $gradient != null {
    background: $gradient;
  } @else {
    background: $color;
  }
}

// Oval mixin
@mixin oval($width, $height, $color, $gradient: null) {
  width: $width;
  height: $height;
  border-radius: 50%;
  @if $gradient != null {
    background: $gradient;
  } @else {
    background: $color;
  }
}

// Line mixin
@mixin line($width, $height, $color, $gradient: null) {
  width: $width;
  height: $height;
  @if $gradient != null {
    background: $gradient;
  } @else {
    background: $color;
  }
}

// Rounded rectangle mixin
@mixin rounded-rectangle($width, $height, $radius, $color, $gradient: null) {
  width: $width;
  height: $height;
  border-radius: $radius;
  @if $gradient != null {
    background: $gradient;
  } @else {
    background: $color;
  }
}

// Triangle mixin
@mixin triangle($size, $color, $direction: 'up') {
  width: 0;
  height: 0;
  
  @if $direction == 'up' {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size * 1.5 solid $color;
  } @else if $direction == 'down' {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size * 1.5 solid $color;
  } @else if $direction == 'left' {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size * 1.5 solid $color;
  } @else if $direction == 'right' {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size * 1.5 solid $color;
  }
}

// Gradient mixins
@mixin linear-gradient($direction, $color-stops...) {
  background: linear-gradient($direction, $color-stops);
}

@mixin radial-gradient($shape, $size, $position, $color-stops...) {
  background: radial-gradient($shape $size at $position, $color-stops);
}

// Advanced shape mixins

// Diamond mixin
@mixin diamond($size, $color, $gradient: null) {
  width: $size;
  height: $size;
  transform: rotate(45deg);
  @if $gradient != null {
    background: $gradient;
  } @else {
    background: $color;
  }
}

// Hexagon mixin (using clip-path)
@mixin hexagon($size, $color, $gradient: null) {
  width: $size;
  height: $size * 0.866; // height = width * sin(60Â°)
  clip-path: polygon(0% 50%, 25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%);
  @if $gradient != null {
    background: $gradient;
  } @else {
    background: $color;
  }
}

// Star mixin (using clip-path)
@mixin star($size, $color, $gradient: null) {
  width: $size;
  height: $size;
  clip-path: polygon(
    50% 0%, 61% 35%, 98% 35%, 68% 57%,
    79% 91%, 50% 70%, 21% 91%, 32% 57%,
    2% 35%, 39% 35%
  );
  @if $gradient != null {
    background: $gradient;
  } @else {
    background: $color;
  }
}

// Kyozo-style shapes and gradients

// Blob shape mixin (using border-radius)
@mixin blob($width, $height, $color, $gradient: null) {
  width: $width;
  height: $height;
  border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;
  @if $gradient != null {
    background: $gradient;
  } @else {
    background: $color;
  }
}

// Pill shape mixin (high border-radius rectangle)
@mixin pill($width, $height, $color, $gradient: null) {
  width: $width;
  height: $height;
  border-radius: $height / 2;
  @if $gradient != null {
    background: $gradient;
  } @else {
    background: $color;
  }
}

// Wave shape for section dividers
@mixin wave-divider($color, $height: 100px) {
  position: relative;
  height: $height;
  width: 100%;
  
  &::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: $color;
    clip-path: polygon(
      0% 100%,
      0% 0%,
      100% 100%
    );
  }
}

// Diagonal section divider
@mixin diagonal-divider($color, $angle: 3deg) {
  position: relative;
  padding: 100px 0;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: $color;
    transform: skewY($angle);
    transform-origin: top left;
    z-index: -1;
  }
}

// Advanced gradient mixins for Kyozo-style design

// Mesh gradient (complex multi-color gradient)
@mixin mesh-gradient($colors...) {
  background: radial-gradient(
    circle at top left,
    $colors
  );
}

// Duotone effect for images
@mixin duotone-overlay($color1, $color2) {
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to bottom right,
      $color1,
      $color2
    );
    mix-blend-mode: hard-light;
    opacity: 0.7;
    pointer-events: none;
  }
}

// Frosted glass effect
@mixin frosted-glass($blur: 10px, $bg-color: rgba(255, 255, 255, 0.1)) {
  background: $bg-color;
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
}

// Noise texture overlay
@mixin noise-overlay($opacity: 0.05) {
  position: relative;
  overflow: hidden;
  
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%' height='100%' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    opacity: $opacity;
    pointer-events: none;
  }
}

// Animated gradient background
@mixin animated-gradient($colors...) {
  background: linear-gradient(270deg, $colors);
  background-size: 400% 400%;
  animation: gradient-animation 15s ease infinite;
}

@keyframes gradient-animation {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}
