'use client';

import React, { useEffect, useRef, useState } from 'react';
import styles from './Dialog.module.scss';
import { Tab } from './Tab';

interface DialogProps {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
  title?: string;
  showTabs?: boolean;
  tabs?: Array<{
    label: string;
    count?: number;
  }>;
  activeTab?: number;
  onTabChange?: (index: number) => void;
  className?: string;
  showCloseButton?: boolean;
}

const Dialog: React.FC<DialogProps> = ({
  isOpen,
  onClose,
  children,
  title,
  showTabs = false,
  tabs = [],
  activeTab = 0,
  onTabChange = () => {},
  className = '',
  showCloseButton = true,
}) => {
  const [isAnimating, setIsAnimating] = useState(false);
  const [isVisible, setIsVisible] = useState(false);
  const dialogRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (isOpen) {
      setIsVisible(true);
      setIsAnimating(true);
      document.body.style.overflow = 'hidden';
    } else {
      setIsAnimating(false);
      const timer = setTimeout(() => {
        setIsVisible(false);
        document.body.style.overflow = '';
      }, 300); // Match this with your CSS transition duration

      return () => clearTimeout(timer);
    }
  }, [isOpen]);

  const handleBackdropClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  if (!isVisible) return null;

  return (
    <div 
      className={`${styles.dialogOverlay} ${isAnimating ? styles.active : ''}`}
      onClick={handleBackdropClick}
    >
      <div 
        ref={dialogRef}
        className={`${styles.dialogContainer} ${isAnimating ? styles.active : ''} ${className}`}
        aria-modal="true"
        role="dialog"
      >
        <div className={styles.dialogContent}>
          {/* Curtain animation elements */}
          <div className={`${styles.curtainLeft} ${isAnimating ? styles.active : ''}`}></div>
          <div className={`${styles.curtainRight} ${isAnimating ? styles.active : ''}`}></div>
          
          {/* Dialog header with title and tabs */}
          <div className={styles.dialogHeader}>
            {title && (
              <div className={styles.dialogTitle}>
                <h2>{title}</h2>
              </div>
            )}
            
            {showTabs && tabs.length > 0 && (
              <div className={styles.tabsContainer}>
                {tabs.map((tab, index) => (
                  <Tab
                    key={index}
                    label={tab.label}
                    count={tab.count}
                    isActive={index === activeTab}
                    onClick={() => onTabChange(index)}
                  />
                ))}
              </div>
            )}
            
            {showCloseButton && (
              <button 
                className={styles.closeButton} 
                onClick={onClose}
                aria-label="Close dialog"
              >
                &times;
              </button>
            )}
          </div>
          
          {/* Dialog body */}
          <div className={styles.dialogBody}>
            {children}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dialog;
