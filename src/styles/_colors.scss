// Color Variables for Kyozo Flow Pro
// Based on Kyozo website color palette
@use 'sass:map';
@use 'sass:color';
@use 'sass:meta';

// Primary Colors
$colors-primary: (
  'pagebg': #111111, // Production: Dark gray page background
  'background-color': #111111,  // Production: Dark gray page background
  'dark-text-color': #ffffff,  // Production: White text for complete centralized control
  'secondary-text-color': #313131,  // Production: Dark gray for card headings/price plans text
  'lighter-background-color': #181818,  // Production: Card background
  'mediam-background-color': #313131,      // Production: Dark gray for borders
  'light-gray': #1B1B1B,
  'lighter-gray': #AAAAAA,
  'accent-pink': #D3439A, // Pink accent color from waitlist button
  'accent-blue': #4169e1, // Royal blue accent
  'accent-light-blue': #5fb4ff, // Light blue accent
  'accent-yellow': #ffbf00, // Amber/yellow accent
  'accent-bright-yellow': #ffff00, // Bright yellow
  'accent-purple': #b19cd9, // Lavender/purple accent
  'accent-light-purple': #d8b4fe, // Light purple
  'accent-mint': #86efac, // Mint green
  'accent-coral': #ff8a65, // Coral/salmon
  'accent-gold': #ffd700, // Gold
  'accent-mauve': #c39797, // Mauve/dusty rose
  'accent-teal': #20c997, // Teal
  'accent-orange': #fd7e14, // Orange
  
  // Semantic colors
  'success': #4caf50, // Success green
  'warning': #ff9800, // Warning orange
  'error': #f44336,   // Error red
  'info': #2196f3,    // Info blue
);

// Standard Colors (from _variables.scss)
$colors-standard: (
  'white': #ff0000, // TESTING: Final red test for complete centralized control
  'gray-100': #f3f4f6,
  'gray-300': #d1d5db,
  'gray-800': #1f2937,
  'gray-900': #111827,
  'blue-500': #3b82f6,
  'indigo-100': #e0e7ff,
  'indigo-600': #4f46e5,
  'green-500': #10b981,
  'teal-100': #ccfbf1,
  'teal-600': #0d9488,
  'purple-500': #8b5cf6,
  'violet-100': #ede9fe,
  'violet-600': #7c3aed,
  'rose-500': #f43f5e,
  'red-100': #fee2e2,
  'red-600': #dc2626,
);

// Common hardcoded colors found in codebase
$colors-common: (
  'black': #000000,
  'white': #ff0000, // TESTING: Final red test for complete centralized control
  'transparent': transparent,
  'current': currentColor,
);

// Background Colors
$colors-backgrounds: (
  'page': map.get($colors-primary, 'pagebg'),                    // Main page background
  'main': map.get($colors-primary, 'background-color'),          // Primary background
  'lighter': map.get($colors-primary, 'lighter-background-color'), // Card/component backgrounds
  'medium': map.get($colors-primary, 'mediam-background-color'),  // Medium backgrounds
  'overlay': rgba(0, 0, 0, 0.5),                                // Dark overlay
  'overlay-light': rgba(255, 255, 255, 0.5),                   // Light overlay
  'glass': rgba(38, 38, 38, 0.3),                              // Glass/blur backgrounds
  'input': rgba(255, 255, 255, 0.05),                          // Input backgrounds
  'input-hover': rgba(255, 255, 255, 0.08),                    // Input hover backgrounds
);

// Card Colors
$colors-cards: (
  'background': map.get($colors-primary, 'lighter-background-color'), // Card backgrounds
  'border': map.get($colors-primary, 'mediam-background-color'),       // Card borders
  'shadow': rgba(0, 0, 0, 0.2),                                       // Card shadows
  'hover': rgba(255, 255, 255, 0.05),                                 // Card hover states
);

// Border Colors
$colors-borders: (
  'default': rgba(255, 255, 255, 0.1),                         // Default borders
  'light': rgba(255, 255, 255, 0.2),                           // Light borders
  'medium': map.get($colors-primary, 'mediam-background-color'), // Medium borders
  'accent': map.get($colors-primary, 'accent-pink'),            // Accent borders
  'transparent': transparent,                                    // Transparent borders
);

// UI Colors (legacy - keeping for compatibility)
$colors-ui: (
  'background': map.get($colors-primary, 'lighter-background-color'),
  'background-light': map.get($colors-primary, 'dark-text-color'),
  'foreground': map.get($colors-primary, 'dark-text-color'),
  'foreground-light': map.get($colors-primary, 'lighter-background-color'),
  'border': rgba(255, 255, 255, 0.1),
  'border-light': rgba(0, 0, 0, 0.1),
  'overlay': rgba(0, 0, 0, 0.5),
  'overlay-light': rgba(255, 255, 255, 0.5),
);

// Semantic Colors
$colors-semantic: (
  'success': #4caf50,
  'warning': #ff9800,
  'error': #f44336,
  'info': #2196f3,
);

// Gradient Colors
$colors-gradients: (
  'primary': linear-gradient(135deg, map.get($colors-primary, 'accent-pink') 0%, map.get($colors-primary, 'accent-purple') 100%),
  'dark': linear-gradient(135deg, map.get($colors-primary, 'background-color') 0%, map.get($colors-primary, 'lighter-background-color') 100%),
  'light': linear-gradient(135deg, map.get($colors-primary, 'dark-text-color') 0%, map.get($colors-primary, 'light-gray') 100%),
);

// Function to get a color with opacity
@function color-with-opacity($color, $opacity) {
  @return rgba($color, $opacity);
}

// Reusable gradient mixins
@mixin gradient-sunset {
  background: linear-gradient(135deg, #f59e0b 0%, #ef4444 50%, #7e22ce 100%);
}

@mixin gradient-ocean {
  background: linear-gradient(135deg, #0ea5e9 0%, #2563eb 50%, #1e3a8a 100%);
}

@mixin gradient-emerald-teal {
  background: linear-gradient(135deg, #10b981 0%, #0d9488 100%);
}

@mixin gradient-blue-purple {
  background: linear-gradient(135deg, #1e40af 0%, #7e22ce 100%);
}

@mixin gradient-pulse {
  background: linear-gradient(135deg, #ec4899 0%, #8b5cf6 50%, #3b82f6 100%);
  background-size: 200% 200%;
  animation: pulse-gradient 3s ease infinite;
}

@mixin gradient-dark-gold-circle {
  background: radial-gradient(
    circle at center,
    rgba(255, 215, 0, 0.8) 10%,
    rgba(0, 0, 0, 0.9) 60%
  );
}

@mixin gradient-aurora {
  background: radial-gradient(circle at center, #86efac 0%, #5fb4ff 40%, #d8b4fe 100%);
}

@mixin gradient-kyozo-background {
  position: relative;
  background-color: transparent;
  overflow: hidden;
  
  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 200%;
    height: 200%;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    background: transparent;
    background-image: 
      conic-gradient(
        from 0deg,
        #7b3b78,
        #2b4b8f,
        #e78b76,
        #7b3b78
      );
    -webkit-mask: 
      radial-gradient(circle at center, 
        transparent 0%, 
        transparent 22%, 
        rgba(0, 0, 0, 0.3) 24%,
        rgba(0, 0, 0, 1) 28%, 
        rgba(0, 0, 0, 1) 32%,
        rgba(0, 0, 0, 0.3) 36%,
        transparent 38%
      );
    mask: 
      radial-gradient(circle at center, 
        transparent 0%, 
        transparent 22%, 
        rgba(0, 0, 0, 0.3) 24%,
        rgba(0, 0, 0, 1) 28%, 
        rgba(0, 0, 0, 1) 32%,
        rgba(0, 0, 0, 0.3) 36%,
        transparent 38%
      );
    filter: blur(5px);
    animation: expandRing 4s infinite;
  }
}

@keyframes expandRing {
  0% {
    width: 50%;
    height: 50%;
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    width: 200%;
    height: 200%;
    opacity: 0;
  }
}

@keyframes pulse-gradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

// Helper function to access colors
@function color($category, $name) {
  @if $category == 'primary' {
    @return map-get($colors-primary, $name);
  } @else if $category == 'ui' {
    @return map-get($colors-ui, $name);
  } @else if $category == 'semantic' {
    @return map-get($colors-semantic, $name);
  } @else if $category == 'gradient' {
    @return map-get($colors-gradients, $name);
  } @else if $category == 'standard' {
    @return map-get($colors-standard, $name);
  } @else if $category == 'common' {
    @return map-get($colors-common, $name);
  } @else if $category == 'backgrounds' {
    @return map-get($colors-backgrounds, $name);
  } @else if $category == 'cards' {
    @return map-get($colors-cards, $name);
  } @else if $category == 'borders' {
    @return map-get($colors-borders, $name);
  } @else {
    @error "Unknown color category: #{$category}";
    @return null;
  }
}

// Convenience functions for commonly used colors
@function primary($name) {
  @return color('primary', $name);
}

@function standard($name) {
  @return color('standard', $name);
}

@function common($name) {
  @return color('common', $name);
}

@function ui($name) {
  @return color('ui', $name);
}

@function backgrounds($name) {
  @return color('backgrounds', $name);
}

@function cards($name) {
  @return color('cards', $name);
}

@function borders($name) {
  @return color('borders', $name);
}

// SCSS Mixin Theming System (inspired by David Xu's approach)
// Define all themes in a single map
$themes: (
  dark: (
    page-bg: #{map.get($colors-primary, 'background-color')},
    card-bg: #{map.get($colors-primary, 'lighter-background-color')},
    text: #{map.get($colors-primary, 'dark-text-color')},
    secondary-text: #{map.get($colors-primary, 'secondary-text-color')},
    border: #{map.get($colors-primary, 'mediam-background-color')},
    accent: #{map.get($colors-primary, 'accent-pink')},
  ),
  light: (
    page-bg: #ffffff,
    card-bg: #f8f9fa,
    text: #1a1a1a,
    secondary-text: #6c757d,
    border: #e9ecef,
    accent: #{map.get($colors-primary, 'accent-pink')},
  ),
);

// Global theme map variable (will be set by the mixin)
$theme-map: null !global;

// Themify mixin - generates theme-specific CSS classes
@mixin themify($themes) {
  @each $name, $values in $themes {
    :global(.#{$name}-theme) & {
      $theme-map: $values !global;
      @content;
    }
  }
}

// Function to get themed values
@function themed($key) {
  @return map.get($theme-map, $key);
}
